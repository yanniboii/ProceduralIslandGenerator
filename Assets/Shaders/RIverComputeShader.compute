// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> river;
RWTexture2D<float4> perlin;

float cellSize;

const static int maxPointCount = 256;

int pointCount;

float4 startPoints[maxPointCount];
float4 endPoints[maxPointCount];

float Distance(float2 a, float2 b)
{
    float num = a.x - b.x;
    float num2 = a.y - b.y;
    return sqrt(num * num + num2 * num2);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    river.GetDimensions(width,height);
    
    river[id.xy] = float4(0,0,0,0);
    float distance = 1000000;
    for (int i = 0; i < pointCount; i++)
    {
        // Sample Perlin noise to get direction
        float2 position = startPoints[i].xy;
        float2 sample = float2(int(id.x) % width, int(id.y) % height);
        float noiseValue = perlin[sample].r; //.SampleLevel(id.xy / float2(width, height), 0).r;
        
        // Convert noise value to angle and direction
        float angle = noiseValue * 6.2831853; // 2 * pi
        float2 direction = float2(cos(angle), sin(angle));
        
        float distanceToPoint = Distance(id.xy, startPoints[i].xy);
        if ((distanceToPoint / cellSize) < 0.1f)
        {
            river[id.xy] = float4(1, 1, 1, 1);
        }
        // Update worm position
        startPoints[i].xy += direction * cellSize;
        
        // Draw worm path
        distanceToPoint = Distance(id.xy, startPoints[i].xy);
        if ((distanceToPoint/cellSize) < 0.1f)
        {
            river[id.xy] = float4(1, 1, 1, 1);
        }
        if ((id.x == uint(startPoints[i].x) && id.y == uint(startPoints[i].y)) || (id.x == uint(endPoints[i].x) && id.y == uint(endPoints[i].y)))
        {
        }

    }
    //float normalizedDistanceToRiverStart = distance / cellSize;

    //if (normalizedDistanceToRiverStart < 0.1f)
    //{
        //river[id.xy] = float4(1, 1, 1, 1);
    //}
}
