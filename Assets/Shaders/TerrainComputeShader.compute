// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

RWTexture2D<float4> FlowField;

struct Octave
{
    float frequency;
    float amplitude;
};

RWStructuredBuffer<Octave> octaveBuffer;
int octavesCount;


float seed;
float2 offset;
float noiseScale;

RWStructuredBuffer<float> minMaxBuffer;

float mix(float x, float y, float a) {
    return x * (1 - a) + y * a;
}

float fade(float t)
{
    //return (t * t * t * t * t * t) * 6 - 15 * (t * t * t * t) + 10 * (t * t * t);
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);

}


float2 psuedoRandomGradient(float2 p){
    p = p +0.01f*seed;
    float x = dot(p,float2(512.2 +seed,698.1 + seed));
    float y = dot(p,float2(278.8 +seed,493.6 + seed));            
    float2 gradient = float2(x,y);

    gradient = sin(gradient);
    gradient = gradient * 86158.4563+seed;
    gradient = sin(gradient + seed);
    return gradient;
}

float noise2D(float2 uv)
{
    float2 gridId = floor(uv);
    float2 gridUv = uv - floor(uv);

    float2 bottomLeft = gridId +float2(0,0);
    float2 bottomRight = gridId +float2(1,0);
    float2 topLeft = gridId +float2(0,1);
    float2 topRight = gridId +float2(1,1);

    float2 gradientBottomLeft = psuedoRandomGradient(bottomLeft);
    float2 gradientBottomRight = psuedoRandomGradient(bottomRight);
    float2 gradientTopLeft = psuedoRandomGradient(topLeft);
    float2 gradientTopRight = psuedoRandomGradient(topRight);

    float2 distFromPxToBottomLeft = gridUv -float2(0,0);
    float2 distFromPxToBottomRight = gridUv -float2(1,0);
    float2 distFromPxToTopLeft = gridUv -float2(0,1);
    float2 distFromPxToTopRight = gridUv -float2(1,1);

    float dotBottomLeft = dot(gradientBottomLeft,distFromPxToBottomLeft);
    float dotBottomRight = dot(gradientBottomRight,distFromPxToBottomRight);
    float dotTopLeft = dot(gradientTopLeft,distFromPxToTopLeft);
    float dotTopRight = dot(gradientTopRight,distFromPxToTopRight);

    float u = fade(gridUv.x);
    float v = fade(gridUv.y);

    float bottom = mix(dotBottomLeft,dotBottomRight, u);
    float top = mix(dotTopLeft,dotTopRight, u);

    float perlin = mix(bottom,top,gridUv.y);

    return perlin;
}

float2 computeGradient(float2 uv) {
    float epsilon = 0.001;
    float noiseCenter = noise2D(uv);
    float noiseRight = noise2D(uv + float2(epsilon, 0));
    float noiseUp = noise2D(uv + float2(0, epsilon));
    
    float dNoise_dx = noiseRight - noiseCenter;
    float dNoise_dy = noiseUp - noiseCenter;
    
    return float2(dNoise_dx, dNoise_dy);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float h = 0.0;
    float2 gradientSum = float2(0,0);

    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = id.xy / float2(width, height) * 2 - 1;
    uv = (uv + offset) * noiseScale;

    float maxAmp = 0;

    if (octavesCount == 0)
    {
        h = 1.0 * (1.0 + noise2D(float2(uv.x + offset.x, uv.y + offset.y))) * 0.5;
        maxAmp = 1;
    }
    else
    {
        for (int i = 0; i < octavesCount; i++)
        {
            float amplitude = octaveBuffer[i].amplitude;
            float frequency = octaveBuffer[i].frequency;

            maxAmp += amplitude;

            h = h + amplitude * (1.0 + noise2D(float2(frequency * (uv.x + offset.x), frequency * (uv.y + offset.y)))) * 0.5;

            float2 noiseUV = (uv + offset) * frequency * noiseScale;
            gradientSum += amplitude * computeGradient(noiseUV);        
        }
    }

    float2 flowDirection = normalize(gradientSum/maxAmp);
    float3 color = (float3(flowDirection,0) + 1) * 0.5; 
    FlowField[id.xy] = float4(color,1);

    h = h/maxAmp;
    Result[id.xy] = float4(h.xxx, 1);
}